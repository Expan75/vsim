import numpy as np
from sklearn.cluster import KMeans
from typing import Dict, Callable, Optional
from functools import partial


def generate_default_candidates(
    n_candidates: int, electorate: np.ndarray, *args, **kwargs
) -> np.ndarray:
    """
    Candidates are generated by k-means to find centroids of the population
    This is akin to parties/candidates aligning themselves with the overall opinion
    of the population.
    """
    model = KMeans(n_clusters=n_candidates, n_init="auto").fit(electorate)
    return model.cluster_centers_


def get_swedish_parties(*args, **kwargs) -> np.ndarray:
    """Emulates the swedish public opinions
    source: https://www.chesdata.eu/2019-chapel-hill-expert-survey

    See research folder file: CHES2019V3
    Coordinate system where x-axis is GAL-TAN and y-axis is economic right(10) and left(0)
        party	galtan	lrecon
        V	1.9411764	1.7647059
        S	4.4117646	4.1176472
        C	2.2352941	8
        L	3.2352941	7.1176472
        M	5.9411764	7.7058825
        KD	7.0588236	7.2352943
        MP	1.5882353	3.9411764
        SD	8.7647057	5.5882354
    """

    parties = np.array(
        [
            [1.9411764, 1.7647059],
            [4.4117646, 4.1176472],
            [2.2352941, 8],
            [3.2352941, 7.1176472],
            [5.9411764, 7.7058825],
            [7.0588236, 7.2352943],
            [1.5882353, 3.9411764],
            [8.7647057, 5.5882354],
        ]
    )
    return parties


CANDIDATE_OPTIONS: Dict[str, Callable] = {
    "default": generate_default_candidates,
    "sweden": partial(get_swedish_parties),
}


def setup_candidates(
    candidates: int,
    electorate: np.ndarray,
    scenario: Optional[str] = None,
    seed: Optional[int] = None,
    *args,
    **kwargs
) -> np.ndarray:
    if scenario is not None:
        return CANDIDATE_OPTIONS[scenario](
            n_candidates=candidates, electorate=electorate, seed=seed
        )
    else:
        return generate_default_candidates(
            n_candidates=candidates, electorate=electorate, seed=seed
        )
